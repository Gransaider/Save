package org.example;

import java.util.ArrayList;

public class Collatca {
    public static void main(String[] args) {
       /* Для объяснения сути гипотезы рассмотрим следующую последовательность чисел, называемую сираку́зской после́довательностью.
        Берём любое натуральное число n. Если оно чётное, то делим его на 2, а если нечётное, то умножаем на 3 и прибавляем 1 (получаем 3n + 1).
        Над полученным числом выполняем те же самые действия, и так далее.

        Гипотеза Коллатца заключается в том, что какое бы начальное число n мы ни взяли, рано или поздно мы получим единицу.

        Например, для числа 3 получаем:

        3 — нечётное, 3×3 + 1 = 10
        10 — чётное, 10:2 = 5
        5 — нечётное, 5×3 + 1 = 16
        16 — чётное, 16:2 = 8
        8 — чётное, 8:2 = 4
        4 — чётное, 4:2 = 2
        2 — чётное, 2:2 = 1
        1 — нечётное, 1×3 + 1 = 4

        Найти наибольшую последовательность Коллатца для чисел в диапазоне от 1 до 1 000 000.
        */
        ArrayList<Integer> arrayList = new ArrayList<>();
        int current = 0;
        int x = 1;
        int max = 0;
        for (int i = 1; i <= 1000000; i++) {
            x = i;
            current = 0;
            while (true) {
                current += 1;
                if (x % 2 != 0) {
                    x = (x * 3) + 1;
                } else if (x % 2 == 0) {
                    x = x / 2;
                }
                if (x == 1) {
                    break;
                }
            }
            if (current > max) {
                max = current;

                //System.out.println(arrayList.size() + arrayList.toString());
            }
        }
        System.out.println(max);
    }




}
